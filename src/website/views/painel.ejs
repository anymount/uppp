<!DOCTYPE html>
<html lang="pt-BR">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Painel - Discord Auth System</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --bg-color: #000000;
            --text-color: #ffffff;
            --nav-bg: rgba(0, 0, 0, 0.8);
            --nav-border: rgba(255, 255, 255, 0.1);
            --accent-color: #333333;
            --p-color: #aaa;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            background-color: var(--bg-color);
            color: var(--text-color);
            min-height: 100vh;
        }

        .navbar {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1rem 2rem;
            background: var(--nav-bg);
            backdrop-filter: blur(10px);
            border: 1px solid var(--nav-border);
            position: fixed;
            width: 90%;
            max-width: 1200px;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            z-index: 1000;
            transition: all 0.3s ease;
            border-radius: 15px;
        }

        .navbar:hover {
            background: var(--nav-bg);
            border-color: rgba(255, 255, 255, 0.2);
        }

        .logo {
            display: flex;
            align-items: center;
            gap: 0;
            font-size: 1.8rem;
            font-weight: 800;
            text-decoration: none;
            background: linear-gradient(45deg, #8a2be2, #4b0082);
            -webkit-background-clip: text;
            background-clip: text;
            color: transparent;
        }

        .nav-links {
            display: flex;
            gap: 2rem;
        }

        .nav-links a {
            color: var(--text-color);
            text-decoration: none;
            font-size: 1rem;
            font-weight: 500;
            padding: 0.5rem 1.2rem;
            border-radius: 8px;
            transition: all 0.3s ease;
        }

        .nav-links a:hover {
            background: rgba(255, 255, 255, 0.1);
            transform: translateY(-2px);
        }

        .dashboard-container {
            max-width: 1200px;
            margin: 120px auto 40px;
            padding: 2rem;
            background: #000000;
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 15px;
            backdrop-filter: blur(10px);
        }

        .header {
            background: #000000;
            border: 1px solid #333;
            border-radius: 16px;
            padding: 20px;
            margin-bottom: 20px;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .user-info {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .user-info img {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            border: 2px solid #5865F2;
        }

        .user-info h2 {
            color: #fff;
            font-size: 20px;
        }

        .logout-btn {
            background: #dc3545;
            color: #fff;
            padding: 10px 20px;
            border-radius: 8px;
            text-decoration: none;
            font-size: 14px;
            display: flex;
            align-items: center;
            gap: 8px;
            transition: all 0.3s ease;
        }

        .logout-btn:hover {
            background: #bb2d3b;
            transform: translateY(-2px);
        }

        .actions-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
        }

        .action-card {
            background: #000000;
            border: 1px solid #333;
            border-radius: 16px;
            padding: 20px;
        }

        .action-header {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 15px;
            color: #fff;
            font-size: 18px;
        }

        .action-header i {
            color: #5865F2;
        }

        .action-form {
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        .action-input {
            padding: 10px;
            background: #111;
            border: 1px solid #333;
            border-radius: 8px;
            color: #fff;
            font-size: 14px;
        }

        .action-button {
            background: #5865F2;
            color: #fff;
            padding: 10px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
            font-size: 14px;
            transition: all 0.3s ease;
        }

        .action-button:hover {
            background: #4752C4;
            transform: translateY(-2px);
        }

        .action-button.danger {
            background: #dc3545;
        }

        .action-button.danger:hover {
            background: #bb2d3b;
        }

        .toast {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 25px;
            border-radius: 8px;
            color: white;
            font-size: 14px;
            z-index: 1002;
            display: flex;
            align-items: center;
            gap: 10px;
            animation: slideIn 0.3s ease, fadeOut 0.5s ease 2.5s forwards;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        }

        .toast.success {
            background: #2ecc71;
        }

        .toast.error {
            background: #e74c3c;
        }

        @keyframes slideIn {
            from {
                transform: translateX(100%);
                opacity: 0;
            }

            to {
                transform: translateX(0);
                opacity: 1;
            }
        }

        @keyframes fadeOut {
            to {
                opacity: 0;
                visibility: hidden;
            }
        }

        @media (max-width: 768px) {
            .dashboard-container {
                padding: 10px;
                margin: 20px auto;
            }

            .header {
                flex-direction: column;
                gap: 15px;
                text-align: center;
            }

            .user-info {
                flex-direction: column;
            }

            .actions-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>

<body>
    <nav class="navbar">
        <a href="/" class="logo">DreamCria</a>
        <div class="nav-links">
            <a href="/dashboard">Inicio</a>
            <a href="/dashboard/configuracoes">Configurações</a>
            <a href="/dashboard/painel">Painel</a>
        </div>
    </nav>

    <% if (typeof message !=='undefined' && message) { %>
        <div class="toast <%= message.type %>">
            <i class="fas <%= message.type === 'success' ? 'fa-check-circle' : 'fa-exclamation-circle' %>"></i>
            <%= message.text %>
        </div>
        <% } %>

            <div class="dashboard-container">
                <div class="header">
                    <div class="user-info">
                        <img src="https://cdn.discordapp.com/avatars/<%= user.id %>/<%= user.avatar %>.png"
                            alt="Avatar">
                        <h2>
                            <%= user.username %>
                        </h2>
                    </div>
                    <a href="/auth/logout" class="logout-btn">
                        <i class="fas fa-sign-out-alt"></i>
                        Sair
                    </a>
                </div>

                <div class="actions-grid">
                    <div class="action-card">
                        <div class="action-header">
                            <i class="fas fa-ban"></i>
                            <span>Banir Usuário</span>
                        </div>
                        <form class="action-form" onsubmit="return banUser(event)">
                            <input type="text" class="action-input" placeholder="ID do Servidor" name="serverId"
                                required>
                            <input type="text" class="action-input" placeholder="ID do Usuário" name="userId" required>
                            <input type="text" class="action-input" placeholder="Motivo do Ban" name="reason">
                            <button type="submit" class="action-button danger">
                                <i class="fas fa-ban"></i>
                                Banir Usuário
                            </button>
                        </form>
                    </div>

                    <div class="action-card">
                        <div class="action-header">
                            <i class="fas fa-door-open"></i>
                            <span>Expulsar Usuário</span>
                        </div>
                        <form class="action-form" onsubmit="return kickUser(event)">
                            <input type="text" class="action-input" placeholder="ID do Servidor" name="serverId"
                                required>
                            <input type="text" class="action-input" placeholder="ID do Usuário" name="userId" required>
                            <input type="text" class="action-input" placeholder="Motivo da Expulsão" name="reason">
                            <button type="submit" class="action-button danger">
                                <i class="fas fa-door-open"></i>
                                Expulsar Usuário
                            </button>
                        </form>
                    </div>

                    <div class="action-card">
                        <div class="action-header">
                            <i class="fas fa-microphone-slash"></i>
                            <span>Mutar Usuário</span>
                        </div>
                        <form class="action-form" onsubmit="return muteUser(event)">
                            <input type="text" class="action-input" placeholder="ID do Servidor" name="serverId"
                                required>
                            <input type="text" class="action-input" placeholder="ID do Usuário" name="userId" required>
                            <input type="number" class="action-input" placeholder="Duração (minutos)" name="duration"
                                required>
                            <button type="submit" class="action-button">
                                <i class="fas fa-volume-mute"></i>
                                Mutar Usuário
                            </button>
                        </form>
                    </div>
                </div>
            </div>

            <script>
                async function banUser(event) {
                    event.preventDefault();
                    const form = event.target;
                    const data = {
                        serverId: form.serverId.value,
                        userId: form.userId.value,
                        reason: form.reason.value
                    };

                    try {
                        const response = await fetch('/dashboard/api/ban', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(data)
                        });

                        if (response.ok) {
                            showToast('Usuário banido com sucesso!', 'success');
                            form.reset();
                        } else {
                            const error = await response.json();
                            showToast(error.error || 'Erro ao banir usuário', 'error');
                        }
                    } catch (error) {
                        console.error('Erro ao banir:', error);
                        showToast('Erro ao banir usuário', 'error');
                    }
                }

                async function kickUser(event) {
                    event.preventDefault();
                    const form = event.target;
                    const data = {
                        serverId: form.serverId.value,
                        userId: form.userId.value,
                        reason: form.reason.value
                    };

                    try {
                        const response = await fetch('/dashboard/api/kick', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(data)
                        });

                        if (response.ok) {
                            showToast('Usuário expulso com sucesso!', 'success');
                            form.reset();
                        } else {
                            const error = await response.json();
                            showToast(error.error || 'Erro ao expulsar usuário', 'error');
                        }
                    } catch (error) {
                        console.error('Erro ao expulsar:', error);
                        showToast('Erro ao expulsar usuário', 'error');
                    }
                }

                async function muteUser(event) {
                    event.preventDefault();
                    const form = event.target;
                    const data = {
                        serverId: form.serverId.value,
                        userId: form.userId.value,
                        duration: parseInt(form.duration.value)
                    };

                    try {
                        const response = await fetch('/dashboard/api/mute', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(data)
                        });

                        if (response.ok) {
                            showToast('Usuário mutado com sucesso!', 'success');
                            form.reset();
                        } else {
                            const error = await response.json();
                            showToast(error.error || 'Erro ao mutar usuário', 'error');
                        }
                    } catch (error) {
                        console.error('Erro ao mutar:', error);
                        showToast('Erro ao mutar usuário', 'error');
                    }
                }

                function showToast(message, type) {
                    const toast = document.createElement('div');
                    toast.className = `toast ${type}`;
                    toast.innerHTML = `
                <i class="fas ${type === 'success' ? 'fa-check-circle' : 'fa-exclamation-circle'}"></i>
                ${message}
            `;
                    document.body.appendChild(toast);

                    setTimeout(() => {
                        toast.remove();
                    }, 3000);
                }
            </script>
</body>

</html>